name: BaskIt
description: >
  BaskIt is an AI-powered grocery shopping assistant built with Python and Streamlit.
  It supports users in collecting grocery items through free text, voice, or images.
  The app provides a right-to-left Hebrew UI, allows for managing and sharing structured lists,
  handling personal preferences (e.g., üßÄ = ‚ÄúEmek 9% cheese‚Äù), and offers undo/restore support.
  It may optionally integrate with Hebrew supermarket websites for online ordering.

project_guidelines:
  - UI must be in Hebrew and follow right-to-left layout
  - All product names, inputs, and user-visible data are in Hebrew
  - Follow modular architecture: ai/, services/, db/, utils/, tests/, etc.
  - Begin with mocked API calls (e.g., OpenAI, Whisper, OCR) and toggle real ones via `.env`
  - Use `loguru` for structured logging (both console and file), with rotation
  - Use `python-dotenv` to manage environment variables
  - All development is done incrementally ‚Äî validate each feature before proceeding to the next
  - All implementations must rely on up-to-date, official documentation (no deprecated APIs)
  - Claude should always ask before proceeding beyond the current phase or scope

testing:
  framework: pytest
  test_structure: mirrored folders under /tests
  principles:
    - Every service or AI module must have unit tests, even for mocks
    - Mocked behavior should match the intended structure of real responses
    - Tests must pass before proceeding to next development step
    - Use `conftest.py` for shared fixtures where needed
    - CI testing via GitHub Actions is encouraged after core functionality stabilizes

phases:
  - Phase 1: Skeleton app with mocked pipeline, logging, and Hebrew UI
  - Phase 2: Real list persistence with SQLite + SQLAlchemy and AI text parsing
  - Phase 3: Voice/image input and personal preference expansion
  - Phase 4: Sharing, undo/restore, and Hebrew supermarket integration
